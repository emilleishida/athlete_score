# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'first_design.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIntValidator, QIntValidator
from PyQt5.QtCore import Qt
import athlete as atl
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import wr_data as wr

#color_record = "#AABD8C"
#color_debutant = "#F39B6D"

color_record = "#FF8552"
color_debutant = "#297373"
color_entre = "white"
color_inter = "#FFC289"
marker_color = "black"
color_grid = "#E0E0E0"


class MplCanvas(FigureCanvas):
    def __init__(self, which, ui, parent=None):
        fig = Figure(figsize=(5, 4.5))
        self.ui = ui
        self.ax = fig.add_subplot(111)
        self.fig = fig
        self.colorbar = None

        super().__init__(fig)
        self.setParent(parent)
        self.which = which
        self.update_plot()

    def update_plot(self):
        if self.which=='force':
            self.plot_force()
        elif self.which=='endu':
            self.plot_endu()
        elif self.which=='final':
            self.plot_final()
    
    def plot_force(self):

        self.ax.clear()
        self.ax.set_axisbelow(True)
        self.ax.yaxis.grid(color=color_grid)
        self.ax.xaxis.grid(color=color_grid)

        S = 0 if self.ui.lineSquat.text()=='' else float(self.ui.lineSquat.text())
        B = 0 if self.ui.lineBench.text()=='' else float(self.ui.lineBench.text())
        D = 0 if self.ui.lineDeadlift.text()=='' else float(self.ui.lineDeadlift.text())
        SBD = S+B+D
        
        age = 0 if self.ui.lineAge.text()=='' else int(self.ui.lineAge.text())
        poids = 0 if self.ui.linePoids.text()=='' else float(self.ui.linePoids.text())
        sexe = str(self.ui.comboBox_sexe.currentText())
        model = atl.model_params_homme if sexe == 'H' else atl.model_params_femme

        mini_poids = 40
        maxi_poids = 300
        X_poids = np.linspace(max(mini_poids, poids-30), min(maxi_poids, poids+30), 100)


        fage = atl.facteur_age_sbd(age)
        record = atl.wr_model(X_poids, *model)
        record_age = record * fage
        baseline_plot = atl.baseline_sbd * record_age
        wr_force = fage * atl.wr_model(poids, *model)
        baseline = atl.baseline_sbd * wr_force


        self.ax.plot(X_poids, record_age, linewidth=3.5, color=color_debutant,
                     label="Record\ndu monde", zorder=1)
        self.ax.plot(X_poids, baseline_plot, color=color_record, linewidth=3.5,
                     label="Débutant", zorder=1)

        if (poids>=mini_poids) & (poids<=maxi_poids):
            self.ax.vlines(x=poids, ymin=baseline, ymax=SBD, linestyle='dashed',
                           color=color_record, alpha=0.9, linewidth=2, zorder=1)
            self.ax.vlines(x=poids, ymin=SBD, ymax=wr_force, linestyle='dashed',
                           color=color_debutant, alpha=0.9, linewidth=2, zorder=1)

            self.ax.scatter(poids, SBD, color=marker_color, marker='x',
                            s=150, label="Toi", zorder=2, linewidths=2)

        self.ax.set_xlabel("Poids (kg)", fontsize=10)
        self.ax.set_title(f"Total S+B+D = {SBD:.0f} kg", fontsize=13)
        self.ax.legend()
        
        self.figure.patch.set_alpha(0.0)
        self.ax.set_facecolor("none")
        self.setStyleSheet("background: transparent")
        self.setAttribute(Qt.WA_TranslucentBackground)
        
        self.figure.tight_layout()
        self.draw()

    def plot_endu(self):
        
        self.ax.clear()
        self.ax.set_axisbelow(True)
        self.ax.yaxis.grid(color=color_grid)
        self.ax.xaxis.grid(color=color_grid)

        h = 0 if self.ui.lineHeure.text()=='' else float(self.ui.lineHeure.text())
        m = 0 if self.ui.lineMinutes.text()=='' else float(self.ui.lineMinutes.text())
        s = 0 if self.ui.lineSecondes.text()=='' else float(self.ui.lineSecondes.text())
        temps = 60*h + m + s/60
        temps = 99999 if temps==0 else temps
            
        age = 0 if self.ui.lineAge.text()=='' else int(self.ui.lineAge.text())
        sexe = str(self.ui.comboBox_sexe.currentText())

        mini_age = 16
        maxi_age = 100
        X_age = np.linspace(max(mini_age, age-15), min(maxi_age, age+15), 100)

        mdist = 42.195 
        axis_age = np.array([atl.facteur_age_marathon(k) for k in X_age])
        facteur_age = atl.facteur_age_marathon(age)

        if self.ui.comboBox_marathon.currentText()=='Marathon':
            perso_vitesse = 60 * mdist/temps
            if sexe == 'H':
                wr_vitesse = 60 * mdist / wr.marathon_age_homme[:, 1].min()
            else:
                wr_vitesse = 60 * mdist / wr.marathon_age_femme[:, 1].min()
        else:
            perso_vitesse = 60 * (mdist/2)/temps
            if sexe == 'H':
                wr_vitesse = 60 * (mdist/2) / wr.semi_age_homme[:, 1].min()
            else:
                wr_vitesse = 60 * (mdist/2) / wr.semi_age_femme[:, 1].min()

        baseline_vitesse = wr_vitesse / atl.baseline_endurance

        self.ax.plot(X_age, axis_age*wr_vitesse, linewidth=3.5, color=color_debutant,
                     label="Record\ndu monde", zorder=1)
        self.ax.plot(X_age, axis_age*baseline_vitesse, color=color_record,
                     linewidth=3.5, label="Débutant", zorder=1)

        if (age>=mini_age) & (age<=maxi_age):
            self.ax.vlines(x=age, ymin=baseline_vitesse*facteur_age, ymax=perso_vitesse, linestyle='dashed',
                           color=color_record, alpha=0.9, linewidth=1.5, zorder=1)
            self.ax.vlines(x=age, ymin=perso_vitesse, ymax=wr_vitesse*facteur_age, linestyle='dashed',
                           color=color_debutant, alpha=0.9, linewidth=1.5, zorder=1)

            self.ax.scatter(age, perso_vitesse, color=marker_color, marker='x',
                            s=150, label="Toi", zorder=2, linewidths=2)

        self.ax.set_xlabel("Age", fontsize=10)
        self.ax.set_title(f"Vitesse moyenne = {perso_vitesse:.1f} km/h", fontsize=13)
        self.ax.legend()

        self.figure.patch.set_alpha(0.0)
        self.ax.set_facecolor("none")
        self.setStyleSheet("background: transparent")
        self.setAttribute(Qt.WA_TranslucentBackground)
        
        self.figure.tight_layout()
        self.draw()

    def plot_final(self):

        self.ax.clear()
        cvals  = [0, 50, 75, 100]
        colors = [color_debutant, color_entre, color_inter, color_record]
        norm=plt.Normalize(min(cvals),max(cvals))
        tuples = list(zip(map(norm,cvals), colors))
        cmap = matplotlib.colors.LinearSegmentedColormap.from_list("", tuples)
        
        axis = np.linspace(0, 1, 100)
        y, x = np.meshgrid(axis, axis)
        
        renorm_x = atl.score_renorm(x)
        renorm_y = atl.score_renorm(y)
        
        z = 100 * np.mean([renorm_y, renorm_x], axis=0)        
        c = self.ax.pcolormesh(100*x, 100*y, z, cmap=cmap)

        if self.colorbar is None:
            self.colorbar = self.fig.colorbar(c, ax=self.ax)

        result = self.ui.result

        if result is not None:
            self.ax.scatter(result[1], result[2], color=marker_color, marker='x',
                            s=150, zorder=2, linewidths=2)

            self.ax.vlines(x=result[1], ymin=0, ymax=result[2], linestyle='dashed',
                           color='black', linewidth=0.7, alpha=0.8)
            self.ax.hlines(y=result[2], xmin=0, xmax=result[1], linestyle='dashed',
                           color='black', linewidth=0.7, alpha=0.8)


        self.ax.set_xlim(0, 100)
        self.ax.set_ylim(0, 100)

        self.ax.set_title(f"Combinaison des scores", fontsize=13)
        self.ax.set_xlabel("Score force (%)", fontsize=10, labelpad=0)
        self.ax.set_ylabel("Score endurance(%)", fontsize=10, labelpad=-1)


        self.figure.patch.set_alpha(0.0)
        self.ax.set_facecolor("none")
        self.setStyleSheet("background: transparent")
        self.setAttribute(Qt.WA_TranslucentBackground)

        self.figure.tight_layout()
        self.draw()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1300, 790)
        self.result = None
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lineAge = QtWidgets.QLineEdit(self.centralwidget)
        self.lineAge.setGeometry(QtCore.QRect(510, 110, 71, 41))
        self.lineAge.setValidator(QIntValidator())
        self.lineAge.setMaxLength(3)
        font = QtGui.QFont()
        font.setFamily("Lato")
        font.setPointSize(27)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.lineAge.setFont(font)
        self.lineAge.setAlignment(QtCore.Qt.AlignCenter)
        self.lineAge.setObjectName("lineAge")
        self.linePoids = QtWidgets.QLineEdit(self.centralwidget)
        self.linePoids.setGeometry(QtCore.QRect(710, 110, 71, 41))
        self.linePoids.setValidator(QIntValidator())
        self.linePoids.setMaxLength(3)
        font = QtGui.QFont()
        font.setFamily("Lato")
        font.setPointSize(27)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.linePoids.setFont(font)
        self.linePoids.setAlignment(QtCore.Qt.AlignCenter)
        self.linePoids.setObjectName("linePoids")
        self.label_profil = QtWidgets.QLabel(self.centralwidget)
        self.label_profil.setGeometry(QtCore.QRect(570, 10, 151, 55))
        font = QtGui.QFont()
        font.setFamily("Noto Sans Mono")
        font.setPointSize(30)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_profil.setFont(font)
        self.label_profil.setAutoFillBackground(False)
        self.label_profil.setAlignment(QtCore.Qt.AlignCenter)
        self.label_profil.setObjectName("label_profil")
        self.label_age = QtWidgets.QLabel(self.centralwidget)
        self.label_age.setGeometry(QtCore.QRect(520, 60, 51, 51))
        font = QtGui.QFont()
        font.setFamily("Noto Sans Mono")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_age.setFont(font)
        self.label_age.setAlignment(QtCore.Qt.AlignCenter)
        self.label_age.setObjectName("label_age")
        self.label_sexe = QtWidgets.QLabel(self.centralwidget)
        self.label_sexe.setGeometry(QtCore.QRect(610, 60, 71, 51))
        font = QtGui.QFont()
        font.setFamily("Noto Sans Mono")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_sexe.setFont(font)
        self.label_sexe.setAlignment(QtCore.Qt.AlignCenter)
        self.label_sexe.setObjectName("label_sexe")
        self.label_poids = QtWidgets.QLabel(self.centralwidget)
        self.label_poids.setGeometry(QtCore.QRect(700, 60, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Noto Sans Mono")
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_poids.setFont(font)
        self.label_poids.setAlignment(QtCore.Qt.AlignCenter)
        self.label_poids.setObjectName("label_poids")
        self.comboBox_sexe = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_sexe.setGeometry(QtCore.QRect(610, 110, 71, 41))
        font = QtGui.QFont()
        font.setFamily("Lato")
        font.setPointSize(27)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.comboBox_sexe.setFont(font)
        self.comboBox_sexe.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.comboBox_sexe.setObjectName("comboBox_sexe")
        self.comboBox_sexe.addItem("")
        self.comboBox_sexe.addItem("")
        self.label_endurance = QtWidgets.QLabel(self.centralwidget)
        self.label_endurance.setGeometry(QtCore.QRect(125, 190, 220, 51))
        font = QtGui.QFont()
        font.setFamily("Noto Sans Mono")
        font.setPointSize(30)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_endurance.setFont(font)
        self.label_endurance.setAlignment(QtCore.Qt.AlignCenter)
        self.label_endurance.setObjectName("label_endurance")
        self.label_force = QtWidgets.QLabel(self.centralwidget)
        self.label_force.setGeometry(QtCore.QRect(1010, 190, 121, 51))
        font = QtGui.QFont()
        font.setFamily("Noto Sans Mono")
        font.setPointSize(30)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_force.setFont(font)
        self.label_force.setAlignment(QtCore.Qt.AlignCenter)
        self.label_force.setObjectName("label_force")
        self.comboBox_marathon = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_marathon.setGeometry(QtCore.QRect(140, 240, 191, 31))
        font = QtGui.QFont()
        font.setFamily("Noto Sans Mono")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.comboBox_marathon.setFont(font)
        self.comboBox_marathon.setObjectName("comboBox_marathon")
        self.comboBox_marathon.addItem("")
        self.comboBox_marathon.addItem("")
        self.comboBox_force = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_force.setGeometry(QtCore.QRect(1010, 240, 121, 31))
        font = QtGui.QFont()
        font.setFamily("Noto Sans Mono")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.comboBox_force.setFont(font)
        self.comboBox_force.setObjectName("comboBox_force")
        self.comboBox_force.addItem("")
        self.lineSquat = QtWidgets.QLineEdit(self.centralwidget)
        self.lineSquat.setGeometry(QtCore.QRect(930, 320, 71, 41))
        self.lineSquat.setValidator(QIntValidator())
        self.lineSquat.setMaxLength(3)
        font = QtGui.QFont()
        font.setFamily("Lato")
        font.setPointSize(27)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.lineSquat.setFont(font)
        self.lineSquat.setAlignment(QtCore.Qt.AlignCenter)
        self.lineSquat.setObjectName("lineSquat")
        self.lineBench = QtWidgets.QLineEdit(self.centralwidget)
        self.lineBench.setGeometry(QtCore.QRect(1040, 320, 71, 41))
        self.lineBench.setValidator(QIntValidator())
        self.lineBench.setMaxLength(3)
        font = QtGui.QFont()
        font.setFamily("Lato")
        font.setPointSize(27)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.lineBench.setFont(font)
        self.lineBench.setAlignment(QtCore.Qt.AlignCenter)
        self.lineBench.setObjectName("lineBench")
        self.lineDeadlift = QtWidgets.QLineEdit(self.centralwidget)
        self.lineDeadlift.setGeometry(QtCore.QRect(1150, 320, 71, 41))
        self.lineDeadlift.setValidator(QIntValidator())
        self.lineDeadlift.setMaxLength(3)
        font = QtGui.QFont()
        font.setFamily("Lato")
        font.setPointSize(27)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.lineDeadlift.setFont(font)
        self.lineDeadlift.setAlignment(QtCore.Qt.AlignCenter)
        self.lineDeadlift.setObjectName("lineDeadlift")
        self.label_squat = QtWidgets.QLabel(self.centralwidget)
        self.label_squat.setGeometry(QtCore.QRect(940, 280, 51, 51))
        font = QtGui.QFont()
        font.setFamily("Noto Sans Mono")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.label_squat.setFont(font)
        self.label_squat.setAlignment(QtCore.Qt.AlignCenter)
        self.label_squat.setObjectName("label_squat")
        self.label_bench = QtWidgets.QLabel(self.centralwidget)
        self.label_bench.setGeometry(QtCore.QRect(1050, 280, 51, 51))
        font = QtGui.QFont()
        font.setFamily("Noto Sans Mono")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.label_bench.setFont(font)
        self.label_bench.setAlignment(QtCore.Qt.AlignCenter)
        self.label_bench.setObjectName("label_bench")
        self.label_deadlift = QtWidgets.QLabel(self.centralwidget)
        self.label_deadlift.setGeometry(QtCore.QRect(1145, 280, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Noto Sans Mono")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.label_deadlift.setFont(font)
        self.label_deadlift.setAlignment(QtCore.Qt.AlignCenter)
        self.label_deadlift.setObjectName("label_deadlift")
        self.label_heure = QtWidgets.QLabel(self.centralwidget)
        self.label_heure.setGeometry(QtCore.QRect(95, 280, 61, 51))
        font = QtGui.QFont()
        font.setFamily("Noto Sans Mono")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.label_heure.setFont(font)
        self.label_heure.setAlignment(QtCore.Qt.AlignCenter)
        self.label_heure.setObjectName("label_heure")
        self.label_secondes = QtWidgets.QLabel(self.centralwidget)
        self.label_secondes.setGeometry(QtCore.QRect(310, 280, 81, 51))
        font = QtGui.QFont()
        font.setFamily("Noto Sans Mono")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.label_secondes.setFont(font)
        self.label_secondes.setAlignment(QtCore.Qt.AlignCenter)
        self.label_secondes.setObjectName("label_secondes")
        self.lineHeure = QtWidgets.QLineEdit(self.centralwidget)
        self.lineHeure.setGeometry(QtCore.QRect(100, 320, 51, 41))
        self.lineHeure.setValidator(QIntValidator())
        self.lineHeure.setMaxLength(2)
        font = QtGui.QFont()
        font.setFamily("Lato")
        font.setPointSize(27)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.lineHeure.setFont(font)
        self.lineHeure.setAlignment(QtCore.Qt.AlignCenter)
        self.lineHeure.setObjectName("lineHeure")
        self.lineMinutes = QtWidgets.QLineEdit(self.centralwidget)
        self.lineMinutes.setGeometry(QtCore.QRect(210, 320, 51, 41))
        self.lineMinutes.setValidator(QIntValidator())
        self.lineMinutes.setMaxLength(2)
        font = QtGui.QFont()
        font.setFamily("Lato")
        font.setPointSize(27)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.lineMinutes.setFont(font)
        self.lineMinutes.setAlignment(QtCore.Qt.AlignCenter)
        self.lineMinutes.setObjectName("lineMinutes")
        self.label_minutes = QtWidgets.QLabel(self.centralwidget)
        self.label_minutes.setGeometry(QtCore.QRect(200, 280, 71, 51))
        font = QtGui.QFont()
        font.setFamily("Noto Sans Mono")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.label_minutes.setFont(font)
        self.label_minutes.setAlignment(QtCore.Qt.AlignCenter)
        self.label_minutes.setObjectName("label_minutes")
        self.lineSecondes = QtWidgets.QLineEdit(self.centralwidget)
        self.lineSecondes.setGeometry(QtCore.QRect(320, 320, 51, 41))
        self.lineSecondes.setValidator(QIntValidator())
        self.lineSecondes.setMaxLength(2)
        font = QtGui.QFont()
        font.setFamily("Lato")
        font.setPointSize(27)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.lineSecondes.setFont(font)
        self.lineSecondes.setAlignment(QtCore.Qt.AlignCenter)
        self.lineSecondes.setObjectName("lineSecondes")
        self.label_final = QtWidgets.QLabel(self.centralwidget)
        self.label_final.setGeometry(QtCore.QRect(520, 190, 251, 51))
        font = QtGui.QFont()
        font.setFamily("Noto Sans Mono")
        font.setPointSize(30)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_final.setFont(font)
        self.label_final.setAlignment(QtCore.Qt.AlignCenter)
        self.label_final.setObjectName("label_final")
        self.label_final_score = QtWidgets.QLabel(self.centralwidget)
        self.label_final_score.setGeometry(QtCore.QRect(540, 260, 211, 91))
        font = QtGui.QFont()
        font.setFamily("Noto Sans Mono")
        font.setPointSize(42)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_final_score.setFont(font)
        self.label_final_score.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.label_final_score.setAlignment(QtCore.Qt.AlignCenter)
        self.label_final_score.setObjectName("label_final_score")
        self.label_endu_score = QtWidgets.QLabel(self.centralwidget)
        self.label_endu_score.setGeometry(QtCore.QRect(130, 60, 211, 91))
        font = QtGui.QFont()
        font.setFamily("Noto Sans Mono")
        font.setPointSize(42)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_endu_score.setFont(font)
        self.label_endu_score.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.label_endu_score.setAlignment(QtCore.Qt.AlignCenter)
        self.label_endu_score.setObjectName("label_endu_score")
        self.label_force_score = QtWidgets.QLabel(self.centralwidget)
        self.label_force_score.setGeometry(QtCore.QRect(970, 60, 211, 91))
        font = QtGui.QFont()
        font.setFamily("Noto Sans Mono")
        font.setPointSize(42)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_force_score.setFont(font)
        self.label_force_score.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.label_force_score.setAlignment(QtCore.Qt.AlignCenter)
        self.label_force_score.setObjectName("label_force_score")

        self.widget_endurance = MplCanvas("endu", self, self.centralwidget)
        self.widget_endurance.setGeometry(QtCore.QRect(0, 390, 431, 351))
        self.widget_endurance.setObjectName("widget_endurance")
        self.widget_final = MplCanvas("final", self, self.centralwidget)
        self.widget_final.setGeometry(QtCore.QRect(438, 390, 431, 351))
        self.widget_final.setObjectName("widget_final")
        self.widget_force = MplCanvas("force", self, self.centralwidget)
        self.widget_force.setGeometry(QtCore.QRect(875, 390, 431, 351))
        self.widget_force.setObjectName("widget_force")

        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.updating_part(MainWindow)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    


    def updating_part(self, MainWindow):

        all_lines = [self.lineAge, self.linePoids, self.lineHeure, self.lineMinutes,
                     self.lineSecondes, self.lineSquat, self.lineBench, self.lineDeadlift]

        for line in all_lines:
            line.textChanged.connect(self.compute_result)

        all_cbs = [self.comboBox_sexe, self.comboBox_force, self.comboBox_marathon]
        for cb in all_cbs:
            cb.currentIndexChanged.connect(self.compute_result)

        
    def fix_zero(line):
        if line.text() == '':
            line.setText(QtCore.QCoreApplication.translate("MainWindow", "0"))      

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.lineAge.setText(_translate("MainWindow", "25"))
        self.linePoids.setText(_translate("MainWindow", "80"))
        self.label_profil.setText(_translate("MainWindow", "Profil"))
        self.label_age.setText(_translate("MainWindow", "Age"))
        self.label_sexe.setText(_translate("MainWindow", "Sexe"))
        self.label_poids.setText(_translate("MainWindow", "Poids"))
        self.comboBox_sexe.setItemText(0, _translate("MainWindow", "H"))
        self.comboBox_sexe.setItemText(1, _translate("MainWindow", "F"))
        self.label_endurance.setText(_translate("MainWindow", "ENDURANCE"))
        self.label_force.setText(_translate("MainWindow", "FORCE"))
        self.comboBox_marathon.setItemText(0, _translate("MainWindow", "Semi-Marathon"))
        self.comboBox_marathon.setItemText(1, _translate("MainWindow", "Marathon"))
        self.comboBox_force.setItemText(0, _translate("MainWindow", "SBD (kg)"))
        self.lineSquat.setText(_translate("MainWindow", ""))
        self.lineBench.setText(_translate("MainWindow", ""))
        self.lineDeadlift.setText(_translate("MainWindow", ""))
        self.label_squat.setText(_translate("MainWindow", "Squat"))
        self.label_bench.setText(_translate("MainWindow", "Bench"))
        self.label_deadlift.setText(_translate("MainWindow", "Deadlift"))
        self.label_heure.setText(_translate("MainWindow", "Heures"))
        self.label_secondes.setText(_translate("MainWindow", "Secondes"))
        self.lineHeure.setText(_translate("MainWindow", ""))
        self.lineMinutes.setText(_translate("MainWindow", ""))
        self.label_minutes.setText(_translate("MainWindow", "Minutes"))
        self.lineSecondes.setText(_translate("MainWindow", ""))
        self.label_final.setText(_translate("MainWindow", "HYBRIDE"))
        self.label_final_score.setText(_translate("MainWindow", "0.0%"))
        self.label_endu_score.setText(_translate("MainWindow", "0.0%"))
        self.label_force_score.setText(_translate("MainWindow", "0.0%"))

    def compute_result(self):

        sexe = str(self.comboBox_sexe.currentText())

        if self.lineAge.text()=='':
            age = 0
        else:
            age = int(self.lineAge.text())

        if self.linePoids.text()=='':
            poids = 0
        else:
            poids = float(self.linePoids.text())
            
        if self.lineSquat.text()=='':
            S = 0
        else:
            S = float(self.lineSquat.text())

        if self.lineBench.text() =='':
            B = 0
        else:
            B = float(self.lineBench.text())

        if self.lineDeadlift.text() =='':
            D = 0
        else:
            D = float(self.lineDeadlift.text())


        if self.lineHeure.text()=='':
            h = 0
        else:
            h = int(self.lineHeure.text())

        if self.lineMinutes.text()=='':
            m = 0
        else:
            m = int(self.lineMinutes.text())

        if self.lineSecondes.text()=='':
            s = 0
        else:
            s = int(self.lineSecondes.text())
            
        SBD = S + B + D
        temps = h*60 + m + s/60

        if str(self.comboBox_marathon.currentText()) == "Marathon":
            temps_semi = None
            temps_marathon = temps
        else:
            temps_semi = temps
            temps_marathon = None            
    
        # A simple computation example
        results = atl.score_athlete(sexe, poids, age, SBD, temps_marathon, temps_semi)
        self.result = results
        
        _translate = QtCore.QCoreApplication.translate
        self.label_final_score.setText(_translate("MainWindow", f"{results[0]:.1f}%"))
        self.label_endu_score.setText(_translate("MainWindow", f"{results[2]:.1f}%"))
        self.label_force_score.setText(_translate("MainWindow", f"{results[1]:.1f}%"))

        self.widget_endurance.update_plot()
        self.widget_force.update_plot()
        self.widget_final.update_plot()
    

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
